record Message = [int ID, int COUNTER];

// numero degli agenti
const N = 10;

/*Ordinamento degli ID:
 * random = createRandomList();
 * ordinati = createOrderedList();
 * ordinati al contrario = createReverseOrderedList();
 */
const identifiers = createRandomList(); 

fun Message newMessage(int id, int counter){
	Message mess = [ID = id, COUNTER = counter];
	return mess;
}

fun list<Message> addMessage(Message mess, list<Message> buf){
	buf = buf + [:mess:];
	return buf;
}

fun bool isNotEmpty(list<Message> buf){
	return size(buf)>0;
}

fun bool contain(list<int> l, int i){
	return exist(l, @ == i);
}

fun list<int> createRandomList(){
	list<int> uniqueID = newList(int);
	for i from 0 to MAXINT{
		int id = int(RND*MAXINT);
		if (!contain(uniqueID, id)){
			uniqueID = uniqueID + [:id:];
		}
		if (size(uniqueID) == N){
			return uniqueID;
		}
	}
	return uniqueID;
}

system Ring {	
	collective {
		for (i ; i < N ; 1) {
			new Agent(i, identifiers[i]);
		}
	}	
	environment {
		store {
			attrib int messages = 0;
			}
		update {
			send{
				messages = global.messages+1;
			}
		}
	}
}

component Agent(int position, int id){
	
	store{
		attrib int position = position;
		attrib int id = id;
		attrib int counter = 0;
		attrib int ringSize = 1;
		attrib int right = (position+1)%N;
		attrib int left = (position+N-1)%N;
		attrib int minimum = MAXINT;
		attrib list<Message> buf = newList(Message);
	}
	
	behaviour{
		ASLEEP = 
			send[my.right == position]<my.id,my.counter>{
				my.minimum = my.id;
			}.AWAKE
			
			+
			
			send [my.left == position](rId,rCounter){
				my.buf = addMessage(newMessage(rId,rCounter),my.buf);
			}.FOLLOWER;
			
		AWAKE = 
			send[my.left == position](rId,rCounter){
				my.buf = addMessage(newMessage(rId,rCounter),my.buf);
			}.AWAKE
			
			+
		
			[isNotEmpty(my.buf) && (my.buf[0].ID != my.id)]send[my.right == position]<my.buf[0].ID,my.buf[0].COUNTER+1>{
				my.minimum = min(my.minimum, my.buf[0].ID);
				my.counter = my.counter + 1;
				my.buf = tail(my.buf);
			}.AWAKE
			
			+
			
			[isNotEmpty(my.buf) && (my.buf[0].ID == my.id)]check*{
				my.ringSize = my.buf[0].COUNTER;
				my.buf = tail(my.buf);
			}.CHECK;			
			
		CHECK =
			[my.id == my.minimum]youWin*{}.LEADER
			
			+
			
			[my.id != my.minimum]youLose*{}.FOLLOWER;
			
		LEADER =
			send[my.left == position](rId,rCounter){
				my.buf = addMessage(newMessage(rId,rCounter),my.buf);
			}.LEADER
			
			+
			
			winner*{}.LEADER;
			
		FOLLOWER = 
			send[my.left == position](rId,rCounter){
				my.buf = addMessage(newMessage(rId,rCounter),my.buf);
			}.FOLLOWER
			
			+
			
			[isNotEmpty(my.buf)]send[my.right == position]<my.buf[0].ID,my.buf[0].COUNTER>{
				my.buf = tail(my.buf);
			}.FOLLOWER
			
			+
			
			loser*{}.FOLLOWER;
			
	}
	init{
		ASLEEP
	}
} 

measure leader = #{Agent[LEADER] | true};
measure check = #{Agent[CHECK] | true};
measure initiator = #{Agent[AWAKE] | true};
measure followers = #{Agent[FOLLOWER] | true};
measure messages = global.messages;